name: Release
on:
  push:
    tags:
      - "v*"
permissions:
  contents: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Adapted from https://gist.github.com/bitmvr/9ed42e1cc2aac799b123de9fdc59b016
      - name: Parse semver information from tag
        id: semver
        run: |
          VERSION="${GITHUB_REF_NAME}"
          VERSION="${VERSION#[vV]}"
          VERSION_MAJOR="${VERSION%%\.*}"
          VERSION_MINOR="${VERSION#*.}"
          VERSION_MINOR="${VERSION_MINOR%.*}"
          VERSION_PATCH="${VERSION##*.}"

          echo "Version: ${VERSION}"
          echo "Version [major]: ${VERSION_MAJOR}"
          echo "Version [minor]: ${VERSION_MINOR}"
          echo "Version [patch]: ${VERSION_PATCH}"

          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=version-major::${VERSION_MAJOR}"
          echo "::set-output name=version-minor::${VERSION_MINOR}"
          echo "::set-output name=version-patch::${VERSION_PATCH}"

      - name: Identify earliest tag for generated release notes
        id: lookup
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MATCH: v(${{ steps.semver.outputs.version-major }}\.${{ steps.semver.outputs.version-minor }}\.\d)
        run: |
          # shellcheck disable=SC2016
          QUERY='
            query ($owner:String!, $repo:String!, $endCursor:String) {
              repositoryOwner(login: $owner) {
                repository(name: $repo) {
                  releases(first: 100, after: $endCursor) {
                    nodes {
                      tagName
                    }
                  }
                }
              }
            }'

          PREVIOUS_TAG_NAME=$( gh api graphql -f query="${QUERY}" -F owner='{owner}' -F repo='{repo}' --paginate --jq ".data.repositoryOwner.repository.releases.nodes[].tagName | match(\"$MATCH\") | [ .captures[].string ] | sort_by( split(\".\") | map(tonumber) ) | first" )
          echo "Previous tag name: $PREVIOUS_TAG_NAME"
          echo "::set-output name=previous-tag-name::${PREVIOUS_TAG_NAME}"

      # Adapted from https://github.com/JasonEtco/build-and-tag-action
      - name: Create or update patch release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: ${{ github.ref_name }}
          PREVIOUS_TAG_NAME: ${{ steps.lookup.outputs.previous-tag-name }}
        run: |
          if ! gh release view "$RELEASE"; then
            echo "Create $RELEASE release"
            gh release create "${RELEASE}" --title="${RELEASE}" --generate-notes --notes-start-tag "$PREVIOUS_TAG_NAME"
          else
            echo "Update $RELEASE tag to point to $GITHUB_SHA"
            gh api "/repos/{owner}/{repo}/git/refs/tags/$RELEASE" -f sha="$GITHUB_SHA" -F force=true
            gh api "/repos/{owner}/{repo}/releases/generate-notes" -f tag_name="$RELEASE" -f previous_tag_name="$PREVIOUS_TAG_NAME" | gh release edit "$RELEASE" --notes-file - 
          fi

      # Adapted from https://github.com/JasonEtco/build-and-tag-action
      - name: Create or update minor release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: v${{ steps.semver.outputs.version-major }}.${{ steps.semver.outputs.version-minor }}
          PREVIOUS_TAG_NAME: ${{ steps.lookup.outputs.previous-tag-name }}
        run: |
          if ! gh release view "$RELEASE"; then
            echo "Create $RELEASE release"
            gh release create "${RELEASE}" --title="${RELEASE}" --generate-notes --notes-start-tag "$PREVIOUS_TAG_NAME"
          else
            echo "Update $RELEASE tag to point to $GITHUB_SHA"
            gh api "/repos/{owner}/{repo}/git/refs/tags/$RELEASE" -f sha="$GITHUB_SHA" -F force=true
            gh api "/repos/{owner}/{repo}/releases/generate-notes" -f tag_name="$RELEASE" -f previous_tag_name="$PREVIOUS_TAG_NAME" | gh release edit "$RELEASE" --notes-file - 
          fi

      # Adapted from https://github.com/JasonEtco/build-and-tag-action
      - name: Create or update major release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: v${{ steps.semver.outputs.version-major }}
          PREVIOUS_TAG_NAME: ${{ steps.lookup.outputs.previous-tag-name }}
        run: |
          if ! gh release view "$RELEASE"; then
            echo "Create $RELEASE release"
            gh release create "${RELEASE}" --title="${RELEASE}" --generate-notes --notes-start-tag "$PREVIOUS_TAG_NAME"
          else
            echo "Update $RELEASE tag to point to $GITHUB_SHA"
            gh api "/repos/{owner}/{repo}/git/refs/tags/$RELEASE" -f sha="$GITHUB_SHA" -F force=true
            gh api "/repos/{owner}/{repo}/releases/generate-notes" -f tag_name="$RELEASE" -f previous_tag_name="$PREVIOUS_TAG_NAME" | gh release edit "$RELEASE" --notes-file - 
          fi